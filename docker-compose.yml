version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: accreditation-postgres
    environment:
      POSTGRES_DB: accreditation_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - accreditation-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: accreditation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - accreditation-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accreditation-backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=accreditation_system
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_super_secret_jwt_key_change_this_in_production
      - JWT_REFRESH_SECRET=your_super_secret_refresh_key_change_this_in_production
      - ENCRYPTION_KEY=change_this_32_character_key_prod
      - PEPPER_SECRET=change_this_pepper_in_production
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - accreditation-network
    restart: unless-stopped

  # Web Dashboard (Nginx serving React build)
  web-dashboard:
    build:
      context: ./web-dashboard
      dockerfile: Dockerfile
    container_name: accreditation-web
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - accreditation-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  accreditation-network:
    driver: bridge
